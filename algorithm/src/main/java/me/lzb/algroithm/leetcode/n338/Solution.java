package me.lzb.algroithm.leetcode.n338;

/**
 * 给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。
 *
 * 示例 1:
 *
 * 输入: 2
 * 输出: [0,1,1]
 * 示例 2:
 *
 * 输入: 5
 * 输出: [0,1,1,2,1,2]
 * 进阶:
 *
 * 给出时间复杂度为O(n*sizeof(integer))的解答非常容易。但你可以在线性时间O(n)内用一趟扫描做到吗？
 * 要求算法的空间复杂度为O(n)。
 * 你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount）来执行此操作。
 * 在真实的面试中遇到过这道题？
 *
 * @author LZB
 */
class Solution {

    /**
     * 0------------------------->0
     * 1------------------------->1
     * 10------------------------>1
     * 11------------------------>2
     * 100----------------------->1
     * 101----------------------->2
     * 110----------------------->2
     * 111----------------------->3
     * 1000---------------------->1
     * 1001---------------------->2
     * 1010---------------------->2
     * 1011---------------------->3
     * 1100---------------------->2
     * 1101---------------------->3
     * 1110---------------------->3
     * 1111---------------------->4
     * 10000--------------------->1
     * 每增加一位，就把前面的重复一遍
     * 也算动态规划吧，用到了之前的计算结果
     * @param num
     * @return
     */
    static int[] countBits(int num) {

        int[] result = new int[num + 1];

        int s = 1;
        int a  = 0;
        for (int i = 1; i <= num ; i++) {
            //当循环到当前长度开始的坐标时，开始下一轮
            if(a  >= s){
                s = i;
                a = 0;
            }
            //从头开始重复，然后加上新增的一位1
            result[i] = result[a] + 1;
            a = a + 1;
        }
        return result;
    }

}
